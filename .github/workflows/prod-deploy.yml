name: Deploy to Develop EC2
on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        module:
          - name: daengle-payment
            path: daengle-payment-api
            ssh_host_var: SSH_PAYMENT_HOST
          - name: daengle-user
            path: daengle-user-api
            ssh_host_var: SSH_USER_HOST
          - name: daengle-vet
            path: daengle-vet-api
            ssh_host_var: SSH_VET_HOST
          - name: daengle-groomer
            path: daengle-groomer-api
            ssh_host_var: SSH_GROOMER_HOST
          - name : daengle-chat
            path : daengle-chat-api
            ssh_host_var: SSH_CHAT_HOST
      max-parallel: 1

    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PAYMENT_HOST: ${{ secrets.SSH_PAYMENT_HOST }}
      SSH_USER_HOST: ${{ secrets.SSH_USER_HOST }}
      SSH_VET_HOST: ${{ secrets.SSH_VET_HOST }}
      SSH_GROOMER_HOST: ${{ secrets.SSH_GROOMER_HOST }}
      SSH_CHAT_HOST : ${{ secrets.SSH_CHAT_HOST }}

    steps:
      # 1. Checkout Repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Create application.yml
      - name: Create application.yml
        run: |
          mkdir -p ${{ matrix.module.path }}/src/main/resources
          echo "${{ secrets.APPLICATION_YML_TEST }}" > ${{ matrix.module.path }}/src/main/resources/application.yml

      # 3. Create .env file
      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE_CONTENT }}" > ${{ matrix.module.path }}/.env

      # 4. Set up JDK and Build JAR
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build JAR with Gradle
        run: |
          ./gradlew clean :${{ matrix.module.path }}:build -x test

      # 5. Verify Build Output
      - name: Verify Build Output
        run: ls -lh ${{ matrix.module.path }}/build/libs

      # 6. Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_ROOT_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_ROOT_SECRET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # 7. Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          set -e
          cd ${{ matrix.module.path }}
          
          IMAGE_TAG="${{ matrix.module.name }}-$(date +%Y%m%d%H%M%S)"
          
          echo "Building Docker image..."
          docker build --platform linux/amd64 --build-arg JAR_FILE=build/libs/${{ matrix.module.name }}-api-0.0.1-SNAPSHOT.jar -t ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG .
          docker tag ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG ${{ secrets.ECR_REPOSITORY_URI }}:latest
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

      # 8. Set up SSH
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      # 9. Set up EC2 Host from Secrets
      - name: Set up EC2 Host
        run: |
          EC2_HOST=${{ secrets[ matrix.module.ssh_host_var ] }}
          echo "Resolved EC2_HOST: $EC2_HOST"
          echo "EC2_HOST=$EC2_HOST" >> $GITHUB_ENV

      # 10. Deploy to EC2
      - name: Deploy to EC2
        run: |
          set -e
          echo "=== Logging into EC2 ==="
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${EC2_HOST} << 'EOF'
          
          # EC2에서 AWS 인증 정보 설정
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_REGION="${{ secrets.AWS_REGION }}"
          
           # AWS ECR에 로그인
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
          
          MODULE=${{ matrix.module.name }}
          IMAGE_TAG=${IMAGE_TAG}
          CONTAINER_NAME="${{matrix.module.name}}-container"
          
          echo "=== Cleaning up old Docker images ==="
          # 최신 6개 이미지를 제외한 나머지 삭제
          IMAGE_COUNT=$(docker images -q | wc -l)
          if [ "$IMAGE_COUNT" -gt 6 ]; then
          echo "Deleting old images, keeping the latest 6..."
          docker images -q | tail -n +7 | xargs -r docker rmi -f
          else
          echo "No old images to delete. Current image count: $IMAGE_COUNT"
          fi
          
          # Pull latest image
          docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest || { echo "Docker pull failed"; exit 1; }
          
          echo "=== Verifying Docker images ==="
          docker images  

          echo "=== Stopping and removing existing container ==="
          docker ps --filter "name=$CONTAINER_NAME" | grep $CONTAINER_NAME && docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME || echo "No running container to stop."
          docker ps -a --filter "name=$CONTAINER_NAME" -q | xargs -r docker stop | xargs -r docker rm || echo "No running container to stop."

          echo "=== Running new container ==="
          docker run -d --name $CONTAINER_NAME -p 8080:8080 ${{ secrets.ECR_REPOSITORY_URI }}:latest || { echo "Docker run failed"; exit 1; }

          echo "=== Deployment completed successfully ==="