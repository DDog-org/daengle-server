name: Deploy to Develop EC2
on:
  pull_request:
    branches: [ "develop" ] # PR 생성 시 임시 배포
  push:
    branches: [ "develop" ] # 병합 후 정식 배포

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        module:
          - name: daengle-payment
            path: daengle-payment-api
          - name: daengle-user
            path: daengle-user-api
          - name: daengle-vet
            path: daengle-vet-api
          - name: daengle-groomer
            path: daengle-groomer-api

    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PAYMENT_HOST: ${{ secrets.SSH_PAYMENT_HOST }}
      SSH_USER_HOST: ${{ secrets.SSH_USER_HOST }}
      SSH_VET_HOST: ${{ secrets.SSH_VET_HOST }}
      SSH_GROOMER_HOST: ${{ secrets.SSH_GROOMER_HOST }}

    steps:
      # 1. Checkout Repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Create application.yml
      - name: Create application.yml
        run: |
          mkdir -p ${{ matrix.module.path }}/src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ${{ matrix.module.path }}/src/main/resources/application.yml

      # 3. Create .env file
      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE_CONTENT }}" > ${{ matrix.module.path }}/.env

      # 4. Set up JDK and Build JAR
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build JAR with Gradle
        run: |
          ./gradlew :${{ matrix.module.name }}:build -x test

      # 5. Verify Build Output
      - name: Verify Build Output
        run: ls -l ${{ matrix.module.path }}/build/libs

      # 6. Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # 7. Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          set -e
          cd ${{ matrix.module.path }}
          
          # 태그 설정: PR 생성 또는 병합 여부에 따라 다르게 태그 생성
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
            IMAGE_TAG=pr-$PR_NUMBER-$(date +%Y%m%d%H%M%S)
          else
            IMAGE_TAG=release-$(date +%Y%m%d%H%M%S)
          fi
          
          echo "Building Docker image..."
          docker build --platform linux/amd64 --build-arg JAR_FILE=build/libs/${{ matrix.module.name }}-api-0.0.1-SNAPSHOT.jar -t ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG .
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG
          
          # 병합 후만 latest 태그 추가
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            docker tag ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG ${{ secrets.ECR_REPOSITORY_URI }}:latest
            docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest
          fi

      # 9. Deploy to EC2
      - name: Deploy to EC2
        run: |
          set -e
          echo "=== Logging into EC2 ==="
          ssh -i ~/.ssh/id_rsa ${{ env.SSH_USER }}@${{ matrix.module.name == 'daengle-payment' && env.SSH_PAYMENT_HOST || matrix.module.name == 'daengle-user' && env.SSH_USER_HOST || matrix.module.name == 'daengle-vet' && env.SSH_VET_HOST || env.SSH_GROOMER_HOST }} << 'EOF'
          MODULE=${{ matrix.module.name }}
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
            IMAGE_TAG=pr-$PR_NUMBER-$(date +%Y%m%d%H%M%S)
            CONTAINER_NAME=pr-$PR_NUMBER-${MODULE}
          else
            IMAGE_TAG=release-$(date +%Y%m%d%H%M%S)
            CONTAINER_NAME=${MODULE}
          fi
          
          echo "=== Logging into ECR ==="
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
          
          echo "=== Pulling the latest Docker image ==="
          docker pull ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG || { echo "Docker pull failed"; exit 1; }
          
          echo "=== Stopping and removing existing container ==="
          docker ps --filter "name=$CONTAINER_NAME" | grep $CONTAINER_NAME && docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME || echo "No running container to stop."
          
          echo "=== Running new container ==="
          docker run -d --name $CONTAINER_NAME -p 8080:8080 ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG || { echo "Docker run failed"; exit 1; }
          
          echo "=== Deployment completed successfully ==="
          EOF
