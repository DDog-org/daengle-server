name: Deploy to Develop EC2

on:
  push:
    branches: [ "develop" ]

jobs:
  filter-modules:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-modules.outputs.modules }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get changed modules
        id: detect-changes
        run: |
          echo "Detecting changes..."
          CHANGED_PATHS=$(git diff --name-only HEAD^ HEAD)
          echo "Changed paths: $CHANGED_PATHS"

          MODULES=""
          if echo "$CHANGED_PATHS" | grep -q '^daengle-payment-api/'; then
            MODULES="$MODULES daengle-payment"
          fi
          if echo "$CHANGED_PATHS" | grep -q '^daengle-user-api/'; then
            MODULES="$MODULES daengle-user"
          fi
          if echo "$CHANGED_PATHS" | grep -q '^daengle-vet-api/'; then
            MODULES="$MODULES daengle-vet"
          fi
          if echo "$CHANGED_PATHS" | grep -q '^daengle-groomer-api/'; then
            MODULES="$MODULES daengle-groomer"
          fi

          echo "Detected modules: $MODULES"
          echo "::set-output name=modules::$MODULES"

  deploy:
    needs: filter-modules
    runs-on: ubuntu-latest

    strategy:
      matrix:
        module: ${{ fromJson(needs.filter-modules.outputs.modules) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Environment Files
        run: |
          echo "${{ secrets.APPLICATION_YML_TEST }}" > ${{ matrix.module }}-api/src/main/resources/application.yml
          echo "${{ secrets.ENV_FILE_CONTENT }}" > ${{ matrix.module }}-api/.env

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build JAR with Gradle
        run: |
          ./gradlew :${{ matrix.module }}:build -Dspring.profiles.active=prod --no-build-cache
          ls -l ${{ matrix.module }}-api/build/libs

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Build and Push Docker Image
        run: |
          cd ${{ matrix.module }}-api
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          docker build --platform linux/amd64 --build-arg JAR_FILE=build/libs/${{ matrix.module }}-0.0.1-SNAPSHOT.jar -t ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG .
          docker tag ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG ${{ secrets.ECR_REPOSITORY_URI }}:latest
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets["SSH_" | upper(matrix.module) | "_HOST"] }} << 'EOF'
          set -e
          MODULE=${{ matrix.module }}
          echo "=== Logging into ECR ==="
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
          
          echo "=== Pulling the latest Docker image ==="
          docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest
          
          echo "=== Stopping and removing existing container ==="
          if docker ps --filter "name=$MODULE" | grep $MODULE; then
            docker stop $MODULE
            docker rm $MODULE
          else
            echo "No existing container to stop."
          fi
          
          echo "=== Running new container ==="
          docker run -d --name $MODULE -p 8080:8080 ${{ secrets.ECR_REPOSITORY_URI }}:latest
          
          echo "=== Verifying container status ==="
          if ! docker ps --filter "name=$MODULE" --filter "status=running" | grep $MODULE; then
            echo "Container failed to start. Checking logs..."
            docker logs $MODULE || true
            exit 1
          fi

          echo "=== Deployment successful ==="
          EOF
