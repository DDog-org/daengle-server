name: Deploy to Develop EC2
on:
  push:
    branches: [ "develop" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        module:
          - name: daengle-payment
            path: daengle-payment-api
            ssh_user: ${{ secrets.SSH_USER }}
            ssh_host: ${{ secrets.SSH_PAYMENT_HOST }}
          - name: daengle-user
            path: daengle-user-api
            ssh_user: ${{ secrets.SSH_USER }}
            ssh_host: ${{ secrets.SSH_USER_HOST }}
          - name: daengle-vet
            path: daengle-vet-api
            ssh_user: ${{ secrets.SSH_USER }}
            ssh_host: ${{ secrets.SSH_VET_HOST }}
          - name: daengle-groomer
            path: daengle-groomer-api
            ssh_user: ${{ secrets.SSH_USER }}
            ssh_host: ${{ secrets.SSH_GROOMER_HOST }}

    steps:
      # 1. Checkout Repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Create application.yml
      - name: Create application.yml
        run: |
          echo "${{ secrets.APPLICATION_YML_TEST }}" > ${{ matrix.module.path }}/src/main/resources/application.yml

      # 3. Create .env file
      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE_CONTENT }}" > ${{ matrix.module.path }}/.env

      # 4. Verify .env File
      - name: Verify .env File
        run: cat ${{ matrix.module.path }}/.env

      # 5. Set up JDK and Build JAR
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build JAR with Gradle
        run: |
          cd ${{ matrix.module.path }}
          ./gradlew clean build -x test

      # 6. Verify Build Output
      - name: Verify Build Output
        run: ls -l ${{ matrix.module.path }}/build/libs

      # 7. Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # 8. Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          set -e
          cd ${{ matrix.module.path }}
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          echo "Building Docker image..."
          docker build --platform linux/amd64 --build-arg JAR_FILE=build/libs/${{ matrix.module.name }}-0.0.1-SNAPSHOT.jar -t ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG .
          docker tag ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG ${{ secrets.ECR_REPOSITORY_URI }}:latest
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

      # 9. Set up SSH
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      # 10. Deploy to EC2
      - name: Deploy to EC2
        run: |
          set -e
          ssh -i ~/.ssh/id_rsa ${{ matrix.module.ssh_user }}@${{ matrix.module.ssh_host }} << 'EOF'
          MODULE=${{ matrix.module.name }}
          echo "=== Logging into ECR ==="
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
          
          echo "=== Pulling the latest Docker image ==="
          docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest || { echo "Docker pull failed"; exit 1; }

          echo "=== Stopping and removing existing container ==="
          docker ps --filter "name=$MODULE" | grep $MODULE && docker stop $MODULE && docker rm $MODULE || echo "No running container to stop."
          
          echo "=== Running new container ==="
          docker run -d --name $MODULE -p 8080:8080 ${{ secrets.ECR_REPOSITORY_URI }}:latest || { echo "Docker run failed"; exit 1; }

          echo "=== Verifying the new container ==="
          sleep 10 # Allow container to initialize
          if ! docker ps --filter "name=$MODULE" --filter "status=running" | grep spring-app; then
            echo "New container is not running. Check logs for errors."
            docker logs $MODULE
            exit 1
          fi

          echo "=== Fetching container logs ==="
          docker logs $MODULE

          echo "=== Deployment completed successfully ==="
          EOF