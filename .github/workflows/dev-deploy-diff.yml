name: Deploy to Develop EC2

on:
  push:
    branches: [ "NONE" ]

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      all_modules: ${{ steps.changes.outputs.all_modules }}
      daengle-chat: ${{ steps.changes.outputs.daengle-chat }}
      daengle-groomer: ${{ steps.changes.outputs.daengle-groomer }}
      daengle-payment: ${{ steps.changes.outputs.daengle-payment }}
      daengle-user: ${{ steps.changes.outputs.daengle-user }}
      daengle-vet: ${{ steps.changes.outputs.daengle-vet }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 Git 히스토리 가져오기

      - name: Check for changes
        id: changes
        run: |
          # 기준 브랜치와 현재 상태의 전체 변경 사항 비교
          CHANGED_FILES=$(git diff --name-only origin/develop...HEAD)
          echo "Changed files: $CHANGED_FILES"
          # 공통 모듈 감지: 변경 시 모든 모듈 재배포
          if echo "$CHANGED_FILES" | grep -E 'daengle-auth|daengle-domain|daengle-notification|daengle-persistence-(mysql|dynamodb)'; then
            echo "all_modules=true" >> $GITHUB_OUTPUT
          else
            echo "all_modules=false" >> $GITHUB_OUTPUT
          fi
          # 개별 모듈 감지
          for module in daengle-chat-api daengle-groomer-api daengle-payment-api daengle-user-api daengle-vet-api; do
            MODULE_NAME="${module/-api/}"
            if echo "$CHANGED_FILES" | grep -E "$module"; then
              echo "$MODULE_NAME=true" >> $GITHUB_OUTPUT
            else
              echo "$MODULE_NAME=false" >> $GITHUB_OUTPUT
            fi
          done
  deploy:
    needs: check-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module:
          - name: daengle-chat
            path: daengle-chat-api
            ssh_host_var: SSH_CHAT_HOST
          - name: daengle-groomer
            path: daengle-groomer-api
            ssh_host_var: SSH_GROOMER_HOST
          - name: daengle-payment
            path: daengle-payment-api
            ssh_host_var: SSH_PAYMENT_HOST
          - name: daengle-user
            path: daengle-user-api
            ssh_host_var: SSH_USER_HOST
          - name: daengle-vet
            path: daengle-vet-api
            ssh_host_var: SSH_VET_HOST
      max-parallel: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 변경된 모듈 여부 확인
      - name: Check Deployment Condition
        id: skip-check
        run: |
          if [[ "${{ needs.check-changes.outputs.all_modules }}" == "true" || "${{ needs.check-changes.outputs[matrix.module.name] }}" == "true" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi
      # 변경사항이 없는 경우 스킵
      - name: Skip Unchanged Modules
        if: steps.skip-check.outputs.deploy == 'false'
        run: echo "No changes detected in ${{ matrix.module.name }}. Skipping deployment."

      # 변경사항이 있는 경우 배포 실행
      - name: Create application.yml
        if: steps.skip-check.outputs.deploy == 'true'
        run: |
          mkdir -p ${{ matrix.module.path }}/src/main/resources
          echo "${{ secrets.APPLICATION_YML_TEST }}" > ${{ matrix.module.path }}/src/main/resources/application.yml
      - name: Build JAR
        if: steps.skip-check.outputs.deploy == 'true'
        run: ./gradlew clean :${{ matrix.module.path }}:build -x test

      - name: Deploy to EC2
        if: steps.skip-check.outputs.deploy == 'true'
        run: |
          echo "Deploying ${{ matrix.module.name }}"
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          EC2_HOST=${{ secrets[matrix.module.ssh_host_var] }}
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@$EC2_HOST << 'EOF'
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
            CONTAINER_NAME="${{ matrix.module.name }}-container"
            docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            docker run -d --name $CONTAINER_NAME -p 8080:8080 ${{ secrets.ECR_REPOSITORY_URI }}:latest
          EOF
      - name: Deployment Complete
        if: steps.skip-check.outputs.deploy == 'true'
        run: echo "Deployment for ${{ matrix.module.name }} completed successfully!"