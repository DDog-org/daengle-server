name: Deploy to EC2

on:
  push:
    branches: [ "develop" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout Code
      - name: Checkout code
        uses: actions/checkout@v4

      # Create application.yml
      - name: Create application.yml
        run: |
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml

      # Docker Build and Push
      - name: Build and Push Docker Image
        run: |
          set -e
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          echo "Building Docker image..."
          docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG .
          docker tag ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG ${{ secrets.ECR_REPOSITORY_URI }}:latest
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

      # Set up SSH
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      # Deploy to EC2
      - name: Deploy to EC2
        run: |
          set -e
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          echo "=== Logging into ECR ==="
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
          echo "=== Pulling the latest Docker image ==="
          docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest
          echo "=== Stopping and removing existing container ==="
          docker stop spring-app || true
          docker rm spring-app || true
          echo "=== Running new container ==="
          docker run -d --name spring-app -p 8080:8080 ${{ secrets.ECR_REPOSITORY_URI }}:latest
          echo "=== Fetching container logs ==="
          docker logs spring-app || echo "No logs available"
          EOF